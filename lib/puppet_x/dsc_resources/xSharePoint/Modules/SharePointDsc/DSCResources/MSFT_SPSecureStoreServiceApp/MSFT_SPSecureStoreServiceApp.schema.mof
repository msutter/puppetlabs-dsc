/*
**Description**

This resource is responsible for provisioning and configuring the secure store service application. 
The parameters passed in (except those related to database specifics) are validated and set when the resource is run, the database values are only used in provisioning of the service application. 

**Example**

    SPSecureStoreServiceApp SecureStoreServiceApp
    {
        Name            = "Secure Store Service Application"
        ApplicationPool = "SharePoint Service Applications"
        AuditingEnabled = $true
        AuditlogMaxSize = 30
        DatabaseName    = "SP_SecureStore"
        InstallAccount  = $InstallAccount
        Ensure          = "Present"
    }
*/
[ClassVersion("1.0.0.0"), FriendlyName("SPSecureStoreServiceApp")]
class MSFT_SPSecureStoreServiceApp : OMI_BaseResource
{
    [Key, Description("The name of the secure store service app")] string Name;
    [Required, Description("The name of the application pool it will run in")] string ApplicationPool;
    [Required, Description("Is auditing enabled for this service app")] boolean AuditingEnabled;
    [Write, Description("What is the maximum size of the audit log in MB")] uint32 AuditlogMaxSize;
    [Write, Description("What SQL credentials should be used to access the database"), EmbeddedInstance("MSFT_Credential")] String DatabaseCredentials;
    [Write, Description("The name of the database for the service app")] string DatabaseName;
    [Write, Description("The name of the database server to host the database")] string DatabaseServer;
    [Write, Description("What type of authentication should be used to access the database"), ValueMap{"Windows","SQL"}, Values{"Windows","SQL"}] string DatabaseAuthenticationType;
    [Write, Description("The name of the database server hosting a failover instance of the database")] string FailoverDatabaseServer;
    [Write, Description("Is partition mode enabled for this service app")] boolean PartitionMode;
    [Write, Description("Is sharing enabled for this service app")] boolean Sharing;
    [Write, Description("Present if the service app should exist, absent if it should not"), ValueMap{"Present","Absent"}, Values{"Present","Absent"}] string Ensure;
    [Write, Description("POWERSHELL 4 ONLY: The account to run this resource as, use PsDscRunAsAccount if using PowerShell 5"), EmbeddedInstance("MSFT_Credential")] String InstallAccount;
};

